# -*- coding: utf-8 -*-
"""2ndR2RTry

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UQqofc51Tzu1c51All-1sBlrJ7mRuzGX
"""

## LOADING DATA

from google.colab import drive
drive.mount('/content/drive')

import os
import numpy as np
import matplotlib.pyplot as plt

dir_root = '/content/drive/MyDrive/Colab Notebooks/ECE50024/Exp/Data'
dir_root_test = '/content/drive/MyDrive/Colab Notebooks/ECE50024/Exp/Test'

from torch.utils.data import Dataset, DataLoader
import torchvision.transforms as transforms
import torchvision
from PIL import Image
import matplotlib.pyplot as plt
import torch
from torch import nn, optim
from  torch.distributions import multivariate_normal
import random
import numpy as np
from tqdm import tqdm

class TrainImageDataset(Dataset):
    def __init__(self, img_folder, transform=None):
        self.transform = transform
        self.img_folder = img_folder
        self.all_imgs = os.listdir(self.img_folder)
    def __len__(self):
        return len(self.all_imgs)
    def __getitem__(self,idx):
        path = self.img_folder + "/" + str(self.all_imgs[idx])
        image_raw = Image.open(path).convert('L')
        image_raw = self.transform(image_raw)
        #print(image_raw.size())
        return image_raw

# Adding Gaussian noise
def add_noise(images, sigma=1, sigma2=0): #sigma is our desired variance in our normal distribution
    sigma /= 255
    sigma2 /= 255
    noisy_imgs = images + (sigma ** 0.5) * torch.randn(*images.shape) + sigma2 * torch.randn(*images.shape) # multipying by sqrt(sigma) to get desired variance in noise
    noisy_imgs = np.clip(noisy_imgs, 0., 1.)
    return noisy_imgs

# Basic CNN model for denoising
class DenoisingCNN(nn.Module):
    def __init__(self):
        super(DenoisingCNN, self).__init__()
        # Encoder
        self.encoder = nn.Sequential(
            nn.Conv2d(1, 32, kernel_size=3, padding=1), # Output: (32, 28, 28)
            nn.ReLU(),
            nn.MaxPool2d(2, 2), # Output: (32, 14, 14)
            nn.Conv2d(32, 64, kernel_size=3, padding=1), # Output: (64, 14, 14)
            nn.ReLU(),
            nn.MaxPool2d(2, 2) # Output: (64, 7, 7)
        )

        # Decoder
        self.decoder = nn.Sequential(
            nn.ConvTranspose2d(64, 32, kernel_size=2, stride=2), # Output: (32, 14, 14)
            nn.ReLU(),
            nn.ConvTranspose2d(32, 1, kernel_size=2, stride=2), # Output: (1, 28, 28)
            nn.Sigmoid() # Ensuring output is between 0 and 1
        )

    def forward(self, x):
        x = self.encoder(x)
        x = self.decoder(x)
        return x


# Device configuration
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

transform = transforms.Compose([transforms.ToTensor(), transforms.Resize((100, 100))])
train_dataset = TrainImageDataset(dir_root, transform)
test_dataset = TrainImageDataset(dir_root_test, transform)

# you can replace the lines above with these if you want to run MNIST again
#transform = transforms.Compose([transforms.ToTensor()])
#train_dataset = torchvision.datasets.MNIST(root='./data', train=True, transform=transform, download=True)
#test_dataset = torchvision.datasets.MNIST(root='./data', train=False, transform=transform, download=True)

a1 = 25
a2 = 1

model = DenoisingCNN().to(device)
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Data loader
batch_size = 64
train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=False)

# Training the model
num_epochs = 20
d = 2
for epoch in range(num_epochs):
    for i, (images) in enumerate(train_loader):
        #print(i)
        #print(images.size())
        noisy_images = add_noise(images).to(device)
        images = images.to(device)

        # formulas presented in the paper for reconstruction (d chosen arbitrarily to be 2)
        recorrupt_input = (a2 / 255) + noisy_images + d*((a1 / 255) ** 0.5)*torch.FloatTensor(noisy_images.size()).normal_(mean=0,std=1).to(device) # Introducing noise to our noisy image (in this case we will add 64 ? )
        recorrupt_target = (a2 / 255) + noisy_images - (1/d)*((a1 / 255) ** 0.5)*torch.FloatTensor(noisy_images.size()).normal_(mean=0,std=1).to(device)


        #Comment these in if ur doing R2R, otherwise you are doing Supervised
        #outputs = model(recorrupt_input)
        #loss = criterion(outputs, recorrupt_target)

        outputs = model(noisy_images)
        loss = criterion(outputs, images)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if (i+1) % 40 == 0:
            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{len(train_loader)}], Loss: {loss.item():.4f}')


print('Finished Training')

import matplotlib.pyplot as plt

def visualize_denoising(model, device, test_loader, num_images=20):
    model.eval()  # Set the model to evaluation mode
    with torch.no_grad():  # No need to track gradients
        dataiter = iter(test_loader)
        images = next(dataiter)

        # Add noise to the images and move them to the configured device
        noisy_images = add_noise(images, a1).to(device)

        # Get the model's predictions (denoised images)
        denoised_images = model(noisy_images)

        # Move images back to CPU for visualization
        noisy_images = noisy_images.cpu()
        denoised_images = denoised_images.cpu()

        # Plot the results
        fig, axs = plt.subplots(num_images, 3, figsize=(10, num_images * 3))
        for i in range(num_images):
            axs[i, 0].imshow(noisy_images[i].squeeze(), cmap='gray')
            axs[i, 0].title.set_text('Noisy Image')
            axs[i, 1].imshow(denoised_images[i].squeeze(), cmap='gray')
            axs[i, 1].title.set_text('Denoised Image')
            axs[i, 2].imshow(images[i].squeeze(), cmap='gray')
            axs[i, 2].title.set_text('Original Image')
            diff = torch.sum(torch.square(denoised_images[i] - images[i]))
            print("Losses by Image: " + str(diff.item()))
            for ax in axs[i]:
                ax.axis('off')
        plt.tight_layout()
        plt.show()

# Call the visualization function
visualize_denoising(model, device, test_loader, num_images=5)